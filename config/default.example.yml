# Config version (MCL will refuse to start if your config requires an update)
version: 2

# Define usernames or uuid of ultra admins (you need at least one to setup MCL ingame).
# These admins may, at any time, op themself with either the server or MCL itself!
admins:
  - 2called_chaos # creator of MCL
  - 93cc6d87-776e-459f-b40a-530a5670c07c # UUID of 2called_chaos


# =============
# = Minecraft =
# =============

# Define the location in which your minecraft server is installed in (where the server.properties file is).
# WARNING: MCL contains components which alter the contents of the folder you specify!
#          MCL may download, create, symlink, backup, restore, delete or modify files and folders such as:
#            - Schematics
#            - server.properties (to switch worlds via !world command)
#            - World directories
#          MCL might update your server and by that overwrite your current server jar. Be sure to always
#          make backups of everything.
root: /home/minecraft_server/my_server

# Define the full command to start your minecraft server. The command will be executed within the root
# directory you've specified so there is no need to `cd` into it.
# If you plan to use automatic server updates use `minecraft_server.jar` (MCL uses symlinks).
# REMEMBER that MCL will start your server, you MUST NOT!
#
# Java flags recommendation: https://aquifermc.org/threads/optimizing-paper-%C2%BB-remove-lag-spikes-fix-tps-improve-performance.101/#post-822
launch_cmd: java -jar minecraft_server.jar



# =====================
# = Advanced settings =
# =====================

# Path to store world backups in. Relative to the Minecraft server root, MUST end with a slash!
# The directory will be created automatically shouldn't it already exist. Can be left blank to not
# use any infix.
backup_infix: backups/

# Path to store Minecraft server jar files. MCL will keep all previous MC versions if you update ingame.
# Relative to the Minecraft server root, MUST end with a slash! The directory will be created automatically
# shouldn't it already exist. Can be left blank to not use any infix.
mcv_infix: versions/

# ============
# = Database =
# ============
# Use the set below if you want to use MySQL.
# NOTE: If you use SQLite you cannot share the same database across multiple instances of MCL as SQLite
#       does not support concurrent access. Make sure to define a unique filename for each instance,
#       or comment it out to use `vendor/data/<instance>.sqlite`. The file is relative to the MCL root directory.
database:
  adapter: sqlite3
  # database: vendor/data/database.sqlite

#database:
#  adapter: mysql2
#  encoding: utf8
#  database: mcl
#  username: root
#  password:
#  host: 127.0.0.1
#  port: 3306



# =======================================================
# = YOU PROBABLY WONT NEED TO EDIT ANYTHING BELOW HERE! =
# =======================================================

# If you don't run a vanilla minecraft server you might need to change the format here.
# If your format isn't listed here create an issue on Github but keep in mind that only vanilla is officially supported.
#     vanilla      [11:38:55] [Server thread/INFO]: message
#     short        [11:38:55 INFO]: message
mc_log_format: vanilla

# Console socket type to use. will be tried from the left to the right (separated by ||).
#   none              don't create console socket (console will not be usable)
#   unix              use UNIX file socket (best)
#   tcp:1234          bind to given port
#   tcp[port-expr]    bind to the first available TCP port from the expression
#                       => https://mcl.breitzeit.de/list_expressions
console_socket: |
  unix || tcp:13700 || tcp[13701-13710,43181-43190] || none

# Define if MCL should start in debug mode or not.
# You can toggle it later (either ingame or via USR1 signal).
debug: no

# The developer mode is very verbose (dozens and hundreds of messages per second) so
# you may use it for debugging only. You can ignore certain channels in the next setting.
dev: no

# What to show if developer mode is enabled
devchannels:
  - main # default
  # - tick # show stat for each tick
  - event # show raw events
  - plugin_load # show loaded plugins
  # - command_register # show command registrations
  # - console_server # verbose console sessions
  - active_record # attach ActiveRecord's logger

# MCL tick rate. Should be between 0 and 1 (default is 0.25).
# The lower the value the higher the resource load caused by MCL.
# The higher the value the slower MCL responds.
tick_rate: 0.25

# Limit how many items will be kept in the backlog
event_backlog: 100

# Define how long terminal clients may block the shutdown process in seconds.
console_maxwait: 30

# Must be integer values, relates to tick rate.
gc_rate: 1234
async_scrub_rate: 100
promise_scrub_rate: 143
player_cache_save_rate: 20
scheduler_dehibernation_rate: 120
